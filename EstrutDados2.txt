//Cristofher Henrique de Souza
//Atividade 01
//Estrutura de Dados 2

#include<iostream> 
using namespace std;

class ABB
{
    struct node
    {
        int data;
        node* esquerda;
        node* direita;
    };

    node* root;

    node* makeEmpty(node* t)
    {
        if(t == NULL)
            return NULL;
        {
            makeEmpty(t->esquerda);
            makeEmpty(t->direita);
            delete t;
        }
        return NULL;
    }

    node* insert(int x, node* t)
    {
        if(t == NULL)
        {
            t = new node;
            t->data = x;
            t->esquerda = t->direita = NULL;
        }
        else if(x < t->data)
            t->esquerda = insert(x, t->esquerda);
        else if(x > t->data)
            t->direita = insert(x, t->direita);
        return t;
    }

    node* findMin(node* t)
    {
        if(t == NULL)
            return NULL;
        else if(t->esquerda == NULL)
            return t;
        else
            return findMin(t->esquerda);
    }

    node* findMax(node* t)
    {
        if(t == NULL)
            return NULL;
        else if(t->direita == NULL)
            return t;
        else
            return findMax(t->direita);
    }

    node* remove(int x, node* t)
    {
        node* temp;
        if(t == NULL)
            return NULL;
        else if(x < t->data)
            t->esquerda = remove(x, t->esquerda);
        else if(x > t->data)
            t->direita = remove(x, t->direita);
        else if(t->esquerda && t->direita)
        {
            temp = findMin(t->direita);
            t->data = temp->data;
            t->direita = remove(t->data, t->direita);
        }
        else
        {
            temp = t;
            if(t->esquerda== NULL)
                t = t->direita;
            else if(t->direita == NULL)
                t = t->esquerda;
            delete temp;
        }

        return t;
    }

    void inorder(node* t)
    {
        if(t == NULL)
            return;
        inorder(t->esquerda);
        cout << t->data << " ";
        inorder(t->direita);
    }

    node* find(node* t, int x)
    {
        if(t == NULL)
            return NULL;
        else if(x < t->data)
            return find(t->esquerda, x);
        else if(x > t->data)
            return find(t->direita, x);
        else
            return t;
    }

public:
    ABB()
    {
        root = NULL;
    }

    ~ABB()
    {
        root = makeEmpty(root);
    }

    void insert(int x)
    {
        root = insert(x, root);
    }

    void remove(int x)
    {
        root = remove(x, root);
    }

    void display()
    {
        inorder(root);
        cout << endl;
    }

    void search(int x)
    {
        root = find(root, x);
    }
};

int main()
{
    ABB t;
    t.insert(20);
    t.insert(25);
    t.insert(15);
    t.insert(10);
    t.insert(30);
    t.display();
    t.remove(20);
    t.display();
    t.remove(25);
    t.display();
    t.remove(30);
    t.display();
}